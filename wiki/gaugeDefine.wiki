#summary Create a new type of gauge

= Building a custom gauge type =

http://lh5.ggpht.com/_esUBlqKjDzk/SbnxoHOfQ_I/AAAAAAAAAzU/Y_3ZbT8NKRA/customgauge.png

It is very easy to create a new [gaugeGType type of gauge]. Here are the three steps:

 * Create the graphical resources (a file .fxz). You can accomplish this using a design tool as Adobe Illustrator having installed the JavaFX production suite (that will allow you to export the Illustrator work to a JavaFX file). Check the mygaugetype.zip file for a complete example (it includes an Adobe Illustrator example).

The Illustrator file will require a few elements and layer, from the top to the bottom this are the layer:

 * jfx:body (this is the 'edges' for the gauge component)
 * jfx:background (this is the background of the gauge component)
 * jfx:decoration (this includes all the miscellaneous decoration on the background)
 * jfx:labels (this layer includes jfx:primarylabel and jfx:secondarylabel)
 * jfx:display (this is the area to display the numeric value)
 * jfx:dispvalue (this is the text element to display the numeric value)
 * jfx:needle (this is the needle in the gauge)
 * jfx:reflex (this is a semitransparent decoration that mimics a glass reflection)

Now, you must create a new JavaFX class in your project, like this one:

{{{
package newgaugetype;

import javafx.scene.text.*;
import javafx.scene.paint.*;
import javafx.scene.effect.*;
import javafx.scene.shape.*;
import org.memefx.gauge.*;

public class MyGaugeType extends BasicGauge {

    /** needle rotating point (X) */
    override public var centerX = 100;
    /** needle rotating point (Y) */
    override public var centerY = 100;

    /** minimum gauge angle */
    override public var minAngle = -150.0;
    /** maximum gauge angle */
    override public var maxAngle = 150.0;

    /** needle initial angle */
    override public var needleAngle = 0.0;

    /** gauge long lines internal radius */
    override public var internalLongRadDial = 80.0;
    /** gauge long lines external radius */
    override public var externalLongRadDial = 86.0;

    /** gauge short lines internal radius */
    override public var internalShortRadDial = 83.0;
    /** gauge short lines external radius */
    override public var externalShortRadDial = 86.0;

    /** gauge large numbers radius (to calculate position) */
    override public var largeNumberRadDial = 66.0;
    /** gauge small numbers radius (to calculate position) */
    override public var smallNumberRadDial = 66.0;

    /** gauge large numbers font size */
    override public var largeNumberFont = Font { size: 12 };
    /** gauge small numbers font size */
    override public var smallNumberFont = Font { size: 10 };

    /** internal radius for highlighted arc */
    override public var highlightInternalRad = 87;
    /** internal radius for highlighted arc */
    override public var highlightExternalRad = 89;

    /** gauge numbers color */
    override public var dialNumsColor = Color.RED;
    /** gauge lines color */
    override public var dialLongLinesColor = Color.RED;
    /** gauge lines color */
    override public var dialShortLinesColor = Color.RED;

    /** URL to gauge graphical resources */
    override public var url = "{__DIR__}mygaugetype.fxz";

    /** gauge custom backgroun
    * @param color Fill for custom background (can be a Color, RadialGradient, etc)
     * @param effect Graphical effect applied to the custom background
     */
    override public function customBackground(color:Paint, effect:Effect):Shape {
        Circle {
            centerX: 100,
            centerY: 100
            radius: 87
            fill: bind color
        }
    };
}
}}}
This class contains basic information about the type of gauge you are creating, like the radius from the center of the needle to the beginning and ending of the dial lines, the distance from the center to the dial numbers, colors, etc. And a reference to the file containing the graphical resources (.fxz).

Finally, you can instantiate your new gauge in your application:
{{{
package newgaugetype;

import javafx.stage.Stage;
import javafx.scene.Scene;
import org.memefx.gauge.*;

var gauge = Gauge {
    ui: MyGaugeType{}
    primaryLabel: "Grade"
    secondaryLabel: "result"
    speed: Gauge.SLOW
    initialValue: 0
    value: 75
};

Stage {
    title: "My own gauge type"
    width: 250
    height: 250
    scene: Scene {
        content: gauge
    }
}
}}}